// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  fullName  String
  phone     String
  email     String?
  photo     String?
  password  String?
  roleId    Int
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  role      Role      @relation(fields: [roleId] , references: [id])
  post      Post[]

  @@map("User")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User[]

  @@map("Role")
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  municipality  Municipality[]

  @@map("City")
}

model Municipality {
  id        Int       @id @default(autoincrement())
  name      String
  cityId    Int
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  disctrict      Suburb[]
  city           City           @relation(fields: [cityId] , references: [id])

  @@map("Municipality")
}

model Suburb {
  id        Int       @id @default(autoincrement())
  name      String
  municipalityId  Int
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  municipality    Municipality    @relation(fields: [municipalityId] , references: [id])

  @@map("Suburb")
}

model Category {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  posts         Post[] 
}

model Post {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  address           String
  addressTechnique  String
  contact           String
  photos            Json?
  userId            Int
  status            String          @default("Draft") //Pending Publish
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user              User            @relation(fields: [userId] , references: [id])
  categories        Category[]   
}